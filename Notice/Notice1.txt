Введение в ASP .NET CORE 
ASP - Active Server Pages - технология создания веб-приложений, изначально, 
ориентированная на серверную активнгость. На сегодня - это универсальная технология, в.т.ч.
с поддержкой серверных страниц (Razor Pages)

Вид веб-приложений
статические - на сервере хранятся HTML  страницы, которые возвращаются на соотв. запросы
(лендинг - тематическая страница, "паспорт" фирмы, товара, услуги)
с серверной активностью (ASP, JSP, PHP) - со стороны сервера есть
запускаемый модуль, он анализирует запрос (клиента) и может собрать страницу "на лету", используя
условия и циклические конструкции. В итоге клиент получает HTML, но он динамический,
то есть меняется в зависимости от параметров запроса (например, фильтр-поиск)
с клиентской активностью (SPA - single page app) 
Перересовывание страницы.
Сервер при этом передает "сырые" данные (не HTML), обічно JSON/ XML формат.

Browser   Server(IIS)    .NET (VM)
Запрос ---> Разбор -------> project.DLL 
Отображение <------ Сбор <-------  результат (return)

MVC - паттерн архитектуры:
- Model: поставщик данных, "слой" в котором данные из хранилища, извлекаются
   и представляются другим частям приложени ввиде объектов 
- View (представление) - визуальная часть, обычно, интерфейс пользователя
    В случаях API представленим назівают и сіріе данніе, точнее, их упаковку


Инверсия управления / внедрение зависимостей 
SOLID -- D - DI 

Суть инверсии - делегирование задачи создания объектов специальному 
модулю. 
Инверсия - объекты создаем не "мы" в точке необходимости, 
а запрашиваем их в "контейнере"
Зависимость - "заявка" на то, что в нашем объекте понадобится другой объект
Иньекция - процедура внедрения зависимостей, передача данных об 
объекте, который заявлен как зависимость.
Слово-синоним Resolution 

Процесс инверсии:
0. Создаем службы - описываем классы, которые будут внедряться 
1. Регистрация источников (служ, сервисов) - сущностей, которые будут
   внедрятся в другие объекты
2. Ограничение жизненного цикла источников (при следующем обращении брать
   новый или ранее созданный)
3. Описание зависимостей 
4. Внедерение (решение) зависимостей -- построение объекта 

Без инверсии                        С инверсией
                                    
class TheClass {                    class TheClass {  
 prop = new ... //сами создали       [Dependency] prop; //DI 
}                                   ...}

Способы внедрения:
- через конструктор 
- свойство с атрибутом 
- через параметр метода 

Пример: есть рекомендация (по безопасности) использовать один 
генератор случайных чисел во всем проекте 

- создаем папку служб "Services" (название произвольно)
- В ней создаем класс RandomService
- В классе Startup/ в классе Program (Core 6)
  добавляем регистрацию службы 
  services.AddSingleton<RandomService>();
- Открываем класс контроллера

Недостаток схемы: sOlid (Open/Closed Principle)
Если нужно вносить изменения в работу службы, то приходится менять
объект. 
